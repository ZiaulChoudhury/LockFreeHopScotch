#include <iostream>
#include <atomic>
#include <thread>
#include <climits>
#include <vector>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <stdio.h>
#include <chrono>
#include <unistd.h>
#include <unordered_map>
#include <mutex>
#define TOTDATA 1024*1024*8
#ifndef WORKLOAD_H_
#define WORKLOAD_H_

class workload {
public:
    workload(){
        for(int i=0;i<TOTDATA;i++) {
            uint32_t key;
            do {
                key = (rand() % (1024 * 1024 * 100)) + 1;
            } while (dataset.find(key) != dataset.end());
            dataset[key] = 12;
            store[i] = key;
        }
    }

    void workSplit(int _NoContains, int _NoInserts, int _NoRemove, int threads)
    {
        tcx = _NoContains/threads;
        tix = _NoInserts/threads;
        trx = _NoRemove/threads;

        for(int i = _NoRemove; i<_NoContains+_NoRemove; i++){
            lookUps[i] = store[i];}

        for(int i = 0; i<_NoRemove; i++){
            removes[i] = store[i];}

        for(int i=0;i<_NoInserts;i++){
                uint32_t key = (rand() % (1024*1024*100)) + 1;
                auto search = dataset.find(key);
                if (search == dataset.end())
                    adds[i] = key;}

    }

    uint32_t get(int index){
        return store[index];
    }

    uint32_t loopUp(int tid){
        uint32_t val;

        return val;
    }

    uint32_t add(int tid){
        uint32_t val=0;
        return val;
    }

    uint32_t remove(int tid){
        uint32_t val = 0;
        return val;
    }

    std::unordered_map<std::uint32_t , std::uint8_t > dataset;
    uint32_t *lookUps = new uint32_t[TOTDATA];
    uint32_t *store   = new uint32_t[TOTDATA];
    uint32_t *adds    = new uint32_t[TOTDATA];
    uint32_t *removes = new uint32_t[TOTDATA];
    int tcx = 0;
    int tix = 0;
    int trx = 0;
    int containsCounter = 0;
    int insertCounter = 0;
    int removeCounter = 0;
    std::mutex cmutex;
    std::mutex xmutex;
};

#endif /* WORKLOAD_H_ */
