/*
 * workload.h
 *
 *  Created on: 26-Jan-2020
 *      Author: ziaul
 */

#ifndef WORKLOAD_H_
#define WORKLOAD_H_

class workload {
public:
    workload(){
        for(int i=0;i<TOTDATA;i++) {
            uint32_t key;
            do {
                key = (rand() % (1024 * 1024 * 100)) + 1;
            } while (dataset.find(key) != dataset.end());
            dataset[key] = 12;
            store[i] = key;
        }
    }

    void workSplit(int _NoContains, int _NoInserts, int _NoRemove)
    {
        tcx = _NoContains;
        tix = _NoInserts;
        trx = _NoRemove;
        for(int i = 0; i<_NoContains; i++){
            lookUps[i] = store[i];}

        for(int i = 0; i<_NoRemove; i++){
            removes[i] = store[TOTDATA-i-1];}

        for(int i=0;i<_NoInserts;i++){
                uint32_t key = (rand() % (1024*1024*100)) + 1;
                auto search = dataset.find(key);
                if (search == dataset.end())
                    adds[i] = key;}

    }

    uint32_t get(int index){
        if(index>=TOTDATA)
            printf(" ERROR ");
        return store[index];
    }

    uint32_t loopUp(){
        uint32_t val;
        cmutex.lock();
        if(containsCounter < tcx) {
            val = lookUps[containsCounter];
            containsCounter++;
        }
        else
            val = -1;
        cmutex.unlock();
        return val;}

    uint32_t add(){
        uint32_t val=0;
        cmutex.lock();
        if(insertCounter< tix) {
            val = adds[insertCounter];
            insertCounter++;}
        else
            val = -1;
        cmutex.unlock();
        return val;}

    uint32_t remove(){
        uint32_t val = 0;
        xmutex.lock();
        if(removeCounter < trx) {
            val = removes[removeCounter];
            removeCounter++;}
        else
            val = -1;
        xmutex.unlock();
        return val;}

    std::unordered_map<std::uint32_t , std::uint8_t > dataset;
    uint32_t *lookUps = new uint32_t[TOTDATA];
    uint32_t *store   = new uint32_t[TOTDATA];
    uint32_t *adds    = new uint32_t[TOTDATA];
    uint32_t *removes = new uint32_t[TOTDATA];
    int tcx = 0;
    int tix = 0;
    int trx = 0;
    int containsCounter = 0;
    int insertCounter = 0;
    int removeCounter = 0;
    std::mutex cmutex;
    std::mutex xmutex;
};

#endif /* WORKLOAD_H_ */
